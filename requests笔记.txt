# requests笔 记
##发送get请求:
发送get请求，直接调用"requests.get"就可以了。想要发送什么类型的请求，就调用什么方法。
"""python
response = requests.get("https://www.baidu.com/")
"""
# response的 - 些属性:
"""python
import requests
kw = {_wd':中国'}
headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.8.2840.99 Safari/537.36 }
#parans
接收一个字典或者字符串的查询参数，字典类型自动转换为ur1编码，不同要urlencode()
response = requests.get("http://www. baidu.com/s", params = kw, headers =headers)
#查看响应内容， response.text 返回的是Unicode格式的数据
print(response. text)
#查看响应内容，response.content返回的字节流数据
print(response. content)
#查看完整url地址
print(response.url)
#查看响应头部字符编码
print(response .encoding)
#查看响应码
print(response.status_code)
"""
#response.text和response.content的区别:
1. response.content: 这个是直接从网络上面抓取的数据。没有经过任何解码。所以是一个bytes类型。其实在硬盘上和在网络上传输的字符串都是bytes类型。
2. response.text:这个是str的数据类型,是requests库将response.content进行解码的字符串。解码需要指定-个编码方式，requests会根据自己的猜测来判断编码的方式。
所以有时候可能会猜测错误，就会导致解码产生乱码。这时候就应该使用"response.content.decode('utf-8')进行手动解码

##发送post请求:
直接调用"requests.post"方法，如果返回的是json数据，调用"response.json"方法将json字符串转换为字典或列表

##使用代理
#在requests中添加代理，向请求方法传递proxies参数

##处理cookie
如果想要在多次请求中共享cookie，应该使用session，代码如下
"""python
import requests
from urllib import parse
url = "http://www.renren.com/Plogin.do"
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "
                  "Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3650.400 QQBrowser/10.4.3341.400"
}
data = {
    "email":"18854889585",
    "password":"1234567890"
}
data = parse.urlencode(data)
session = requests.Session()
session.post(url,data=data.encode('utf-8'),headers=headers)
response = session.get("http://www.renren.com/259452569/profile")
with open('renren.html','w',encoding='utf-8') as f:
    f.write(response.text)
"""

##处理不信任的SSL证书
#向请求中传递verify参数，令verify=False
"""python
resp = requests.get(url,verify=False)
print(resp.content.decode('utf-8'))
"""